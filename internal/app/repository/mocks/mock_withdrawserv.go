// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/lette/OneDrive/Документы/Projects/ygo/go-musthave-diploma-tpl/internal/app/interfaces/withdraw.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entity "github.com/MrTomSawyer/loyalty-system/internal/app/entity"
	models "github.com/MrTomSawyer/loyalty-system/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockWithdrawalRepository is a mock of WithdrawalRepository interface.
type MockWithdrawalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalRepositoryMockRecorder
}

// MockWithdrawalRepositoryMockRecorder is the mock recorder for MockWithdrawalRepository.
type MockWithdrawalRepositoryMockRecorder struct {
	mock *MockWithdrawalRepository
}

// NewMockWithdrawalRepository creates a new mock instance.
func NewMockWithdrawalRepository(ctrl *gomock.Controller) *MockWithdrawalRepository {
	mock := &MockWithdrawalRepository{ctrl: ctrl}
	mock.recorder = &MockWithdrawalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalRepository) EXPECT() *MockWithdrawalRepositoryMockRecorder {
	return m.recorder
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawalRepository) GetWithdrawals(userID int) ([]models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", userID)
	ret0, _ := ret[0].([]models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawalRepositoryMockRecorder) GetWithdrawals(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawalRepository)(nil).GetWithdrawals), userID)
}

// Withdraw mocks base method.
func (m *MockWithdrawalRepository) Withdraw(withdraw entity.Withdrawal, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", withdraw, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawalRepositoryMockRecorder) Withdraw(withdraw, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawalRepository)(nil).Withdraw), withdraw, userID)
}

// MockWithdrawalService is a mock of WithdrawalService interface.
type MockWithdrawalService struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawalServiceMockRecorder
}

// MockWithdrawalServiceMockRecorder is the mock recorder for MockWithdrawalService.
type MockWithdrawalServiceMockRecorder struct {
	mock *MockWithdrawalService
}

// NewMockWithdrawalService creates a new mock instance.
func NewMockWithdrawalService(ctrl *gomock.Controller) *MockWithdrawalService {
	mock := &MockWithdrawalService{ctrl: ctrl}
	mock.recorder = &MockWithdrawalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawalService) EXPECT() *MockWithdrawalServiceMockRecorder {
	return m.recorder
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawalService) GetWithdrawals(userID int) ([]models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", userID)
	ret0, _ := ret[0].([]models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawalServiceMockRecorder) GetWithdrawals(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawalService)(nil).GetWithdrawals), userID)
}

// Withdraw mocks base method.
func (m *MockWithdrawalService) Withdraw(withdraw models.Withdraw, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", withdraw, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawalServiceMockRecorder) Withdraw(withdraw, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawalService)(nil).Withdraw), withdraw, userID)
}
